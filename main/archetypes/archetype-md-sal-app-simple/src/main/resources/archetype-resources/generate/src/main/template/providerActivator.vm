package ${package}.provider;

import org.opendaylight.controller.sal.binding.api.AbstractBindingAwareProvider;
import org.opendaylight.controller.sal.binding.api.BindingAwareBroker.ProviderContext;
import org.opendaylight.controller.sal.binding.api.data.DataBrokerService;
import org.opendaylight.yang.gen.v1.opendaylight.sample.rev140407.${capitalApp}Service;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * This activator is generated by code generator. It will initialize an app provider
 * and register one YANG based RPC implementation.
 */
public class ProviderActivator extends AbstractBindingAwareProvider {
    private static final Logger log = LoggerFactory.getLogger(ProviderActivator.class);

    private AppProvider appProvider;

    public ProviderActivator() {
      appProvider = new AppProvider();
    }

    @Override
    public void onSessionInitiated(ProviderContext session) {
        log.info("MD SAL sample provider Session initialized");
        DataBrokerService dataService = session.<DataBrokerService>getSALService(DataBrokerService.class);
        appProvider.setDataService(dataService);
        // Register the RPC service implementation, so consumer or web can use it
        session.addRpcImplementation(${capitalApp}Service.class, appProvider);
    }
}